// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do Timeseries.FromJson(jsonString);

using System.ComponentModel;

namespace Flipper;

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public class TimeseriesLatest
{
    /// <summary>
    /// Key = ID, Value = SerieEntry.
    /// </summary>
    [JsonProperty("data")]
    public Dictionary<string, TimeserieEntryLatest> Dataset { get; set; }

    public static TimeseriesLatest FromJson(string json) => JsonConvert.DeserializeObject<TimeseriesLatest>(json, Converter.Settings);
    
    public class TimeserieEntryLatest
    {
        [DefaultValue(0)]
        [JsonProperty("high", NullValueHandling = NullValueHandling.Ignore)]
        public long High { get; set; }

        [DefaultValue(0)]
        [JsonProperty("highTime", NullValueHandling = NullValueHandling.Ignore)]
        public long HighTime { get; set; }

        [DefaultValue(0)]
        [JsonProperty("low", NullValueHandling = NullValueHandling.Ignore)]
        public long Low { get; set; }

        [DefaultValue(0)]
        [JsonProperty("lowTime", NullValueHandling = NullValueHandling.Ignore)]
        public long LowTime { get; set; }
    }
}

public static class TimeseriesExtensions
{
    public static string ToJson(this TimeseriesLatest self) => JsonConvert.SerializeObject(self, Converter.Settings);
    public static string ToJson(this Timeseries10Min self) => JsonConvert.SerializeObject(self, Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}